//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Controles"",
            ""id"": ""202990bd-89da-40b9-b845-b064bf618518"",
            ""actions"": [
                {
                    ""name"": ""Movements"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a9907093-d56c-4207-a7ad-8b12ccd41ee0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cb58d881-7a09-4eb0-891f-05da13d8b04d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Manette"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""ZQSD"",
                    ""id"": ""6fbb1014-1622-4330-b66a-4e107e24ea2e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""40698db1-8b50-4e6b-8754-6b7ffbc3dc07"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clavier"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""238eca8a-0903-488c-956d-f48a33a3fec8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clavier"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0ea48c03-562e-46e1-9577-c2dae719938b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clavier"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""56fed088-0c04-422a-bf93-0451c527cef2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Clavier"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Manette"",
            ""bindingGroup"": ""Manette"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Clavier"",
            ""bindingGroup"": ""Clavier"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Controles
        m_Controles = asset.FindActionMap("Controles", throwIfNotFound: true);
        m_Controles_Movements = m_Controles.FindAction("Movements", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controles
    private readonly InputActionMap m_Controles;
    private IControlesActions m_ControlesActionsCallbackInterface;
    private readonly InputAction m_Controles_Movements;
    public struct ControlesActions
    {
        private @Controls m_Wrapper;
        public ControlesActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movements => m_Wrapper.m_Controles_Movements;
        public InputActionMap Get() { return m_Wrapper.m_Controles; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlesActions set) { return set.Get(); }
        public void SetCallbacks(IControlesActions instance)
        {
            if (m_Wrapper.m_ControlesActionsCallbackInterface != null)
            {
                @Movements.started -= m_Wrapper.m_ControlesActionsCallbackInterface.OnMovements;
                @Movements.performed -= m_Wrapper.m_ControlesActionsCallbackInterface.OnMovements;
                @Movements.canceled -= m_Wrapper.m_ControlesActionsCallbackInterface.OnMovements;
            }
            m_Wrapper.m_ControlesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movements.started += instance.OnMovements;
                @Movements.performed += instance.OnMovements;
                @Movements.canceled += instance.OnMovements;
            }
        }
    }
    public ControlesActions @Controles => new ControlesActions(this);
    private int m_ManetteSchemeIndex = -1;
    public InputControlScheme ManetteScheme
    {
        get
        {
            if (m_ManetteSchemeIndex == -1) m_ManetteSchemeIndex = asset.FindControlSchemeIndex("Manette");
            return asset.controlSchemes[m_ManetteSchemeIndex];
        }
    }
    private int m_ClavierSchemeIndex = -1;
    public InputControlScheme ClavierScheme
    {
        get
        {
            if (m_ClavierSchemeIndex == -1) m_ClavierSchemeIndex = asset.FindControlSchemeIndex("Clavier");
            return asset.controlSchemes[m_ClavierSchemeIndex];
        }
    }
    public interface IControlesActions
    {
        void OnMovements(InputAction.CallbackContext context);
    }
}
